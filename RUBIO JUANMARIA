import panel as pn
import os
from datetime import datetime

pn.extension()

# Criterios START v3 (complete list)
start_questions = [
    {
        "section": "Indicación de la medicación",
        "questions": [
            "¿Se prescriben medicamentos claramente indicados y adecuados en un contexto clínico sin contraindicaciones, según su ficha técnica en dosis y duración?"
        ]
    },
    {
        "section": "Sistema cardiovascular",
        "questions": [
            "¿Se prescriben antihipertensivos cuando la presión arterial sistólica es >140 mmHg y/o diastólica >90 mmHg (o >150 mmHg sistólica en fragilidad moderada/grave)?",
            "¿Se prescriben estatinas en pacientes con enfermedad vascular coronaria, cerebral o periférica documentada, salvo en final de vida o fragilidad moderada/grave?",
            "¿Se prescriben IECA en cardiopatía isquémica?",
            "¿Se prescriben betabloqueantes en cardiopatía isquémica sintomática?",
            "¿Se prescriben IECA en insuficiencia cardíaca con fracción de eyección reducida?",
            "¿Se prescriben betabloqueantes cardioselectivos (bisoprolol, nebivolol, metoprolol, carvedilol) en insuficiencia cardíaca estable con fracción de eyección reducida?",
            "¿Se prescriben antagonistas de la aldosterona (espironolactona, eplerenona) en insuficiencia cardíaca sin deterioro grave de función renal (TFGe >30 ml/min/m²)?",
            "¿Se prescriben inhibidores del cotransportador sodio-glucosa tipo 2 (canagliflozina, dapagliflozina, empagliflozina, ertugliflozina) en insuficiencia cardíaca sintomática, independientemente de diabetes?",
            "¿Se prescribe sacubitrilo/valsartán en insuficiencia cardíaca con fracción de eyección reducida sintomática pese a dosis óptimas de IECA o ARA-II?",
            "¿Se prescriben betabloqueantes en fibrilación auricular crónica con mal control de frecuencia cardíaca?",
            "¿Se prescribe hierro intravenoso en insuficiencia cardíaca sintomática con fracción de eyección reducida y déficit de hierro?"
        ]
    },
    {
        "section": "Antiagregantes/anticoagulantes",
        "questions": [
            "¿Se prescriben antagonistas de la vitamina K, inhibidores directos de la trombina o inhibidores del factor Xa en fibrilación auricular crónica o paroxística?",
            "¿Se prescriben antiagregantes (AAS, clopidogrel, prasugrel, ticagrelor) en enfermedad vascular coronaria, cerebral o periférica documentada?"
        ]
    },
    {
        "section": "Sistema nervioso central",
        "questions": [
            "¿Se prescribe levodopa o un agonista dopaminérgico en enfermedad de Parkinson idiopática con deterioro funcional y discapacidad?",
            "¿Se prescriben antidepresivos no tricíclicos en depresión mayor?",
            "¿Se prescriben inhibidores de la acetilcolinesterasa (donepezilo, rivastigmina, galantamina) en enfermedad de Alzheimer leve-moderada?",
            "¿Se prescribe rivastigmina en demencia por cuerpos de Lewy o demencia asociada a Parkinson?",
            "¿Se prescriben ISRS (o ISRN/pregabalina si ISRS contraindicados) para ansiedad grave persistente que afecta independencia y calidad de vida?",
            "¿Se prescriben agonistas dopaminérgicos (ropinirol, pramipexol, rotigotina) para síndrome de piernas inquietas, tras descartar deficiencia de hierro o enfermedad renal grave?",
            "¿Se prescribe propranolol para temblor esencial con deterioro funcional y discapacidad?"
        ]
    },
    {
        "section": "Sistema renal",
        "questions": [
            "¿Se prescribe 1-alfa-hidroxicolecalciferol o calcitriol en enfermedad renal crónica grave (TFGe <30 ml/min/m²) con hipocalcemia y hiperparatiroidismo secundario?",
            "¿Se prescriben quelantes del fósforo en enfermedad renal crónica grave (TFGe <30 ml/min/m²) con fósforo sérico >1,76 mmol/l pese a dieta?",
            "¿Se prescriben análogos de la eritropoyetina en enfermedad renal crónica grave con anemia sintomática (Hb 10,0-12,0 g/dl)?",
            "¿Se prescriben IECA o ARA-II en enfermedad renal crónica con proteinuria (>300 mg/24 h)?"
        ]
    },
    {
        "section": "Sistema gastrointestinal",
        "questions": [
            "¿Se prescriben inhibidores de la bomba de protones en enfermedad por reflujo gastroesofágico grave o estenosis péptica esofágica?",
            "¿Se prescriben inhibidores de la bomba de protones con AAS a dosis bajas y antecedentes de úlcera péptica o esofagitis?",
            "¿Se prescriben inhibidores de la bomba de protones con AINE de corta o larga duración?",
            "¿Se prescriben suplementos de fibra (salvado, ispaghula, metilcelulosa, sterculia) en diverticulosis con estreñimiento?",
            "¿Se prescriben laxantes osmóticos (lactulosa, macrogol, sorbitol) en estreñimiento crónico idiopático o secundario benigno?",
            "¿Se prescriben probióticos con antibióticos en pacientes no inmunocomprometidos para prevenir diarrea por Clostridioides difficile?",
            "¿Se prescribe tratamiento erradicador de Helicobacter pylori en enfermedad ulcerosa péptica activa asociada?"
        ]
    },
    {
        "section": "Sistema respiratorio",
        "questions": [
            "¿Se prescriben antimuscarínicos de acción larga (LAMA) o agonistas beta-2 de acción larga (LABA) para EPOC sintomática GOLD 1-2 o asma crónica?",
            "¿Se prescriben corticosteroides inhalados para asma moderado-grave o EPOC GOLD 3-4 con FEV1 <50% y exacerbaciones repetidas?",
            "¿Se prescribe oxigenoterapia domiciliaria continua en hipoxemia crónica (pO2 <60 mmHg o SatO2 <89%)?"
        ]
    },
    {
        "section": "Sistema musculoesquelético",
        "questions": [
            "¿Se prescriben fármacos antirreumáticos modificadores en artritis reumatoide crónica activa incapacitante?",
            "¿Se prescriben bifosfonatos con vitamina D y calcio en pacientes con corticosteroides orales a largo plazo para prevenir osteoporosis?",
            "¿Se prescribe vitamina D en osteoporosis conocida, fracturas por fragilidad o T-score <-2,5?",
            "¿Se prescriben antirresortivos o anabolizantes óseos en osteoporosis conocida o fracturas por fragilidad sin contraindicaciones?",
            "¿Se prescribe vitamina D en mayores con déficit de 25-hidroxicolecalciferol (<20 µg/l), caídas u osteopenia?",
            "¿Se prescriben antirresortivos tras retirar denosumab después de al menos dos dosis?",
            "¿Se prescriben antirresortivos tras retirar teriparatida/abaloparatida?",
            "¿Se prescriben inhibidores de la xantina oxidasa (alopurinol, febuxostat) en gota recurrente?",
            "¿Se prescribe ácido fólico en pacientes que toman metotrexato?"
        ]
    },
    {
        "section": "Sistema genitourinario",
        "questions": [
            "¿Se prescriben bloqueantes selectivos alfa-1-adrenérgicos (tamsulosina, silodosina) para síntomas de hiperplasia benigna de próstata sin necesidad de prostatectomía?",
            "¿Se prescriben inhibidores de la 5-alfa reductasa (finasterida, dutasterida) para síntomas de hiperplasia benigna de próstata sin necesidad de prostatectomía?",
            "¿Se prescriben estrógenos tópicos vaginales o pesario con estrógenos en vaginitis atrófica sintomática?",
            "¿Se prescriben estrógenos tópicos vaginales o pesario con estrógenos en mujeres con infecciones urinarias recurrentes?",
            "¿Se prescriben inhibidores de la fosfodiesterasa 5 (avanafilo, sildenafilo, tadalafilo, vardenafilo) para disfunción eréctil persistente que causa sufrimiento?"
        ]
    },
    {
        "section": "Sistema endocrino",
        "questions": [
            "¿Se prescriben IECA (o ARA-II si no se toleran) en diabetes con enfermedad renal (proteinuria o microalbuminuria) sin enfermedad renal crónica grave?"
        ]
    },
    {
        "section": "Analgésicos",
        "questions": [
            "¿Se prescriben opioides potentes en dolor moderado-grave no artrósico cuando paracetamol, AINE o opioides de baja potencia son insuficientes?",
            "¿Se prescriben laxantes en pacientes que reciben opioides regularmente (no a demanda)?",
            "¿Se prescribe parche de lidocaína tópica al 5% para dolor neuropático localizado (ej. neuralgia postherpética)?"
        ]
    },
    {
        "section": "Vacunas",
        "questions": [
            "¿Se prescribe la vacuna anual contra la gripe estacional?",
            "¿Se prescribe la vacuna antineumocócica al menos una vez, según guías nacionales?",
            "¿Se prescribe la vacuna contra el virus varicela-zoster, según guías nacionales?",
            "¿Se prescribe la vacuna contra el SARS-CoV-2, según guías nacionales?"
        ]
    }
]

# Criterios STOPP v3 (complete list)
stopp_questions = [
    {
        "section": "Sistema cardiovascular",
        "questions": [
            "¿Se prescriben diuréticos de asa para edemas maleolares sin evidencia clínica, bioquímica o radiológica de insuficiencia cardíaca, hepática, síndrome nefrótico o renal?",
            "¿Se prescriben diuréticos de asa como tratamiento de primera línea para hipertensión en ausencia de insuficiencia cardíaca?",
            "¿Se prescriben betabloqueantes no cardioselectivos en pacientes con asma o EPOC?",
            "¿Se prescriben antagonistas del calcio (verapamilo, diltiazem) en insuficiencia cardíaca con fracción de eyección reducida?",
            "¿Se prescriben estatinas en pacientes en final de vida o con fragilidad grave?",
            "¿Se prescriben IECA o ARA-II en pacientes con hiperpotasemia conocida (>5,5 mmol/l)?",
            "¿Se prescriben antagonistas de la aldosterona en pacientes con insuficiencia renal grave (TFGe <30 ml/min/m²)?",
            "¿Se prescriben amiodarona como tratamiento de primera línea para fibrilación auricular sin evaluación de alternativas más seguras?"
        ]
    },
    {
        "section": "Antiagregantes/anticoagulantes",
        "questions": [
            "¿Se prescriben antiagregantes (AAS, clopidogrel) sin indicación clara de enfermedad vascular documentada?",
            "¿Se prescriben anticoagulantes orales en pacientes con alto riesgo de hemorragia sin evaluación de riesgo-beneficio?",
            "¿Se prescriben antagonistas de la vitamina K en combinación con antiagregantes sin indicación clara (ej. triple terapia prolongada)?"
        ]
    },
    {
        "section": "Sistema nervioso central",
        "questions": [
            "¿Se prescriben benzodiacepinas de acción larga (diazepam, clonazepam) en pacientes con alto riesgo de caídas?",
            "¿Se prescriben antidepresivos tricíclicos en pacientes con demencia o glaucoma?",
            "¿Se prescriben neurolépticos atípicos para insomnio o ansiedad sin psicosis?",
            "¿Se prescriben inhibidores de la acetilcolinesterasa en demencia avanzada sin beneficio clínico?",
            "¿Se prescriben opioides de acción prolongada para dolor crónico no oncológico sin evaluación regular?"
        ]
    },
    {
        "section": "Sistema gastrointestinal",
        "questions": [
            "¿Se prescriben inhibidores de la bomba de protones a dosis completas durante más de 8 semanas sin indicación clara?",
            "¿Se prescriben procinéticos (metoclopramida) en pacientes con enfermedad de Parkinson?",
            "¿Se prescriben laxantes estimulantes en ausencia de estreñimiento opioide o idiopático?"
        ]
    },
    {
        "section": "Sistema respiratorio",
        "questions": [
            "¿Se prescriben corticosteroides inhalados en EPOC leve sin exacerbaciones frecuentes?",
            "¿Se prescriben teofilina oral en EPOC sin evaluación de alternativas más seguras?"
        ]
    },
    {
        "section": "Sistema musculoesquelético",
        "questions": [
            "¿Se prescriben AINE orales a largo plazo en pacientes con hipertensión, insuficiencia cardíaca o enfermedad renal crónica?",
            "¿Se prescriben bifosfonatos en pacientes con insuficiencia renal grave (TFGe <30 ml/min/m²)?",
            "¿Se prescriben relajantes musculares (ciclobenzaprina) para espasmos musculares crónicos sin evaluación de alternativas?"
        ]
    },
    {
        "section": "Sistema genitourinario",
        "questions": [
            "¿Se prescriben anticolinérgicos (oxibutinina) para incontinencia urinaria en pacientes con demencia o glaucoma?",
            "¿Se prescriben alfa-bloqueantes no selectivos en pacientes con hipotensión ortostática?"
        ]
    },
    {
        "section": "Sistema endocrino",
        "questions": [
            "¿Se prescriben sulfonilureas de acción prolongada (glibenclamida) en pacientes con alto riesgo de hipoglucemia?",
            "¿Se prescriben corticosteroides sistémicos a largo plazo sin indicación clara de enfermedad inflamatoria?"
        ]
    },
    {
        "section": "Analgésicos",
        "questions": [
            "¿Se prescriben opioides potentes en dolor crónico no oncológico sin evaluación de riesgo de dependencia?",
            "¿Se prescriben AINE en pacientes con úlcera péptica activa o sangrado gastrointestinal previo?"
        ]
    },
    {
        "section": "Carga antimuscarínica/anticolinérgica",
        "questions": [
            "¿Se prescriben fármacos antimuscarínicos sistémicos en presencia de demencia o deterioro cognitivo crónico?",
            "¿Se prescriben múltiples fármacos con carga anticolinérgica en pacientes con estreñimiento crónico o retención urinaria?"
        ]
    }
]

# Dictionary to track responses
response_tracker = {}

# Dictionary to store patient details
patient_data = {
    "identificativo": "",
    "peso": "",
    "edad": "",
    "alteracion_analitica": ""
}

# Total number of questions for the progress counter
TOTAL_QUESTIONS = sum(len(section['questions']) for section in start_questions) + \
                  sum(len(section['questions']) for section in stopp_questions)

# Function to create question cards with response tracking
def create_question_card(question, number, section_name, q_type):
    radio_group = pn.widgets.RadioButtonGroup(
        name=f'Respuesta_{q_type}_{section_name}_{number}',
        options=['SÍ', 'NO', 'N/A'],
        button_type='success',
        width=150,
        height=50,
        sizing_mode='fixed',
        value=None
    )
    def update_tracker(event):
        if event.new:
            response_tracker[f"{q_type}_{section_name}_{number}"] = event.new
        else:
            response_tracker.pop(f"{q_type}_{section_name}_{number}", None)
        check_answered()
    
    radio_group.param.watch(update_tracker, 'value')
    
    return pn.Card(
        pn.Row(
            pn.pane.Markdown(f"**{number}.** {question}", min_width=600, sizing_mode='stretch_width'),
            radio_group,
            align='center',
            sizing_mode='stretch_width'
        ),
        title=f"{q_type} - {section_name}",
        styles={'background': '#f5f5f5', 'margin': '10px', 'padding': '10px'},
        sizing_mode='stretch_width',
        min_height=100
    )

# Function to create patient data input form
def create_patient_form():
    identificativo_input = pn.widgets.TextInput(name='Dato Identificativo', placeholder='Ej. Nombre o ID del paciente')
    peso_input = pn.widgets.FloatInput(name='Peso (kg)', placeholder='Ej. 70.5', width=150)
    edad_input = pn.widgets.IntInput(name='Edad (años)', placeholder='Ej. 65', width=150)
    alteracion_input = pn.widgets.TextAreaInput(name='Alteración Notable en Última Analítica', placeholder='Ej. Hiperpotasemia detectada', rows=4, width=400)
    
    def update_patient_data(event):
        patient_data['identificativo'] = identificativo_input.value or "No proporcionado"
        patient_data['peso'] = str(peso_input.value) if peso_input.value is not None else "No proporcionado"
        patient_data['edad'] = str(edad_input.value) if edad_input.value is not None else "No proporcionado"
        patient_data['alteracion_analitica'] = alteracion_input.value or "No proporcionado"
    
    identificativo_input.param.watch(update_patient_data, 'value')
    peso_input.param.watch(update_patient_data, 'value')
    edad_input.param.watch(update_patient_data, 'value')
    alteracion_input.param.watch(update_patient_data, 'value')
    
    return pn.Column(
        pn.pane.Markdown("## Datos del Paciente", styles={'font-size': '18px'}),
        identificativo_input,
        peso_input,
        edad_input,
        alteracion_input,
        sizing_mode='stretch_width',
        height=400
    )

# Function to check if any questions are answered
def check_answered():
    answered_questions = len(response_tracker)
    result_output.object = f"Progreso: {answered_questions}/{TOTAL_QUESTIONS} preguntas respondidas."
    result_button.disabled = answered_questions == 0
    txt_button.disabled = answered_questions == 0

# Create START tabs
start_tabs = []
for section in start_questions:
    questions = []
    for i, question in enumerate(section['questions'], 1):
        questions.append(create_question_card(question, i, section['section'], 'START'))
    start_tabs.append((
        section['section'],
        pn.Column(
            *questions,
            scroll=True,
            sizing_mode='stretch_width',
            height=600,
            css_classes=['scrollable-column']
        )
    ))

# Create STOPP tabs
stopp_tabs = []
for section in stopp_questions:
    questions = []
    for i, question in enumerate(section['questions'], 1):
        questions.append(create_question_card(question, i, section['section'], 'STOPP'))
    stopp_tabs.append((
        section['section'],
        pn.Column(
            *questions,
            scroll=True,
            sizing_mode='stretch_width',
            height=600,
            css_classes=['scrollable-column']
        )
    ))

# Add custom CSS
pn.extension(raw_css=[ """
.scrollable-column {
    overflow-y: auto !important;
    overflow-x: hidden !important;
    padding: 10px;
}
.card {
    margin-bottom: 15px !important;
}
.main-container {
    max-width: 1200px;
    margin: auto;
    padding: 20px;
}
"""])

# Main tabs with patient data tab
main_tabs = pn.Tabs(
    ('Datos del Paciente', create_patient_form()),
    ('START', pn.Tabs(*start_tabs, sizing_mode='stretch_width')),
    ('STOPP', pn.Tabs(*stopp_tabs, sizing_mode='stretch_width')),
    tabs_location='above',
    sizing_mode='stretch_width'
)

# Result calculation system
result_button = pn.widgets.Button(name='Calcular Resultados', button_type='primary', margin=10, disabled=True)
result_output = pn.pane.Str(f"Progreso: 0/{TOTAL_QUESTIONS} preguntas respondidas.", styles={'font-size': '16px', 'padding': '10px'})
txt_button = pn.widgets.Button(name='Generar Informe TXT', button_type='success', margin=10, disabled=True)

def calculate_results(event):
    start_results = {section['section']: [] for section in start_questions}
    stopp_results = {section['section']: [] for section in stopp_questions}
    start_score = 0
    stopp_score = 0
    
    for key, value in response_tracker.items():
        if value == 'SÍ':
            parts = key.split('_')
            q_type = parts[0]
            q_num = int(parts[-1])
            section_name = '_'.join(parts[1:-1])
            
            if q_type == 'START':
                start_score += 1
                for section in start_questions:
                    if section['section'] == section_name:
                        start_results[section_name].append((q_num, section['questions'][q_num-1]))
                        break
            elif q_type == 'STOPP':
                stopp_score += 1
                for section in stopp_questions:
                    if section['section'] == section_name:
                        stopp_results[section_name].append((q_num, section['questions'][q_num-1]))
                        break
    
    result_output.object = f"""
    Progreso: {len(response_tracker)}/{TOTAL_QUESTIONS} preguntas respondidas.
    ## Resultados Finales
    **START:** {start_score} puntos (prescripciones adecuadas)  
    **STOPP:** {stopp_score} puntos (prescripciones inapropiadas)
    """
    txt_button.disabled = False
    return start_score, stopp_score, start_results, stopp_results

def generate_txt(event):
    try:
        start_score, stopp_score, start_results, stopp_results = calculate_results(None)
        
        # Text report content
        text_content = f"""
Informe de Resultados START/STOPP v3
Fecha: {datetime.now().strftime("%d/%m/%Y %H:%M")}

Datos del Paciente
------------------
Dato Identificativo: {patient_data['identificativo']}
Peso: {patient_data['peso']} kg
Edad: {patient_data['edad']} años
Alteración Notable en Última Analítica: {patient_data['alteracion_analitica']}

Resumen
-------
START: {start_score} puntos (prescripciones adecuadas)
STOPP: {stopp_score} puntos (prescripciones inapropiadas)

Detalles START (Prescripciones Adecuadas)
----------------------------------------
"""
        for section, questions in start_results.items():
            text_content += f"\n{section}\n"
            if questions:
                for num, question in sorted(questions):
                    text_content += f"  {num}. {question}\n"
            else:
                text_content += "  Ninguna pregunta respondida con 'SÍ'.\n"
        
        text_content += f"""
Detalles STOPP (Prescripciones Inapropiadas)
-------------------------------------------
"""
        for section, questions in stopp_results.items():
            text_content += f"\n{section}\n"
            if questions:
                for num, question in sorted(questions):
                    text_content += f"  {num}. {question}\n"
            else:
                text_content += "  Ninguna pregunta respondida con 'SÍ'.\n"
        
        text_content += """
Interpretación
--------------
Los criterios START identifican prescripciones potencialmente omitidas que podrían beneficiar al paciente, mientras que los criterios STOPP identifican prescripciones potencialmente inapropiadas que deberían revisarse o suspenderse. Un puntaje alto en START indica un buen manejo de prescripciones necesarias, mientras que un puntaje alto en STOPP sugiere la necesidad de revisar las prescripciones actuales.
"""
        
        # Write text content to file
        text_file = "report.txt"
        with open(text_file, "w", encoding="utf-8") as f:
            f.write(text_content)
        
        result_output.object += f"\n\nInforme TXT generado como 'report.txt' en {os.getcwd()}."
    except Exception as e:
        result_output.object += f"\n\nError al generar el informe TXT: {str(e)}"

result_button.on_click(calculate_results)
txt_button.on_click(generate_txt)

# Final layout
app = pn.Column(
    pn.pane.Markdown("# Cuestionario START/STOPP v3 (en pruebas) ", styles={'font-size': '24px', 'margin': '20px'}, sizing_mode='stretch_width'),
    main_tabs,
    pn.Row(result_button, txt_button, align='center', margin=10, sizing_mode='stretch_width'),
    result_output,
    sizing_mode='stretch_width',
    css_classes=['main-container']
)

# Run the application
if __name__ == '__main__':
    pn.serve(app, title="Cuestionario START/STOPP v3", show=True)
